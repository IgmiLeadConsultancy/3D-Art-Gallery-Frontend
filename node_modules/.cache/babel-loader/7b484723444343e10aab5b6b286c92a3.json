{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, ADD_PRODUCTS } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\"; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"http://localhost:5000/users/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/users/\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/users/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n}; // Add Products\n\nexport const addProducts = _ref2 => {\n  let {\n    product_name,\n    product_short_desc,\n    taq,\n    maq,\n    product_img,\n    top,\n    price,\n    sp_price,\n    big_desc\n  } = _ref2;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      product_name,\n      product_short_desc,\n      taq,\n      maq,\n      product_img,\n      top,\n      price,\n      sp_price,\n      big_desc\n    });\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/addProducts/\", body, config);\n      dispatch({\n        type: ADD_PRODUCTS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","ADD_PRODUCTS","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout","addProducts","product_name","product_short_desc","taq","maq","product_img","top","price","sp_price","big_desc"],"sources":["C:/FF2/frontend/src/actions/auth.js"],"sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT,\n\tADD_PRODUCTS,\n} from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n\tif (localStorage.token) {\n\t\tsetAuthToken(localStorage.token);\n\t}\n\n\ttry {\n\t\tconst res = await axios.get(\"http://localhost:5000/users/auth\");\n\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR,\n\t\t});\n\t}\n};\n\n// Register User\nexport const register =\n\t({ name, email, password }) =>\n\tasync (dispatch) => {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t};\n\n\t\tconst body = JSON.stringify({ name, email, password });\n\n\t\ttry {\n\t\t\tconst res = await axios.post(\n\t\t\t\t\"http://localhost:5000/users/\",\n\t\t\t\tbody,\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_SUCCESS,\n\t\t\t\tpayload: res.data,\n\t\t\t});\n\n\t\t\tdispatch(loadUser());\n\t\t} catch (err) {\n\t\t\tconst errors = err.response.data.errors;\n\n\t\t\tif (errors) {\n\t\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n\t\t\t}\n\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_FAIL,\n\t\t\t});\n\t\t}\n\t};\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t};\n\n\tconst body = JSON.stringify({ email, password });\n\n\ttry {\n\t\tconst res = await axios.post(\n\t\t\t\"http://localhost:5000/users/auth\",\n\t\t\tbody,\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(loadUser());\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL,\n\t\t});\n\t}\n};\n\n// Logout / Clear Profile\n\nexport const logout = () => (dispatch) => {\n\tdispatch({ type: LOGOUT });\n};\n\n\n// Add Products\n\nexport const addProducts=\n({  product_name,\n\tproduct_short_desc,\n\ttaq,\n\tmaq,\n\tproduct_img,\n\ttop,\n\tprice,\n\tsp_price,\n\tbig_desc }) =>\n\tasync (dispatch) => {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t};\n\n\t\tconst body = JSON.stringify({  product_name,\n\t\t\tproduct_short_desc,\n\t\t\ttaq,\n\t\t\tmaq,\n\t\t\tproduct_img,\n\t\t\ttop,\n\t\t\tprice,\n\t\t\tsp_price,\n\t\t\tbig_desc });\n\n\t\ttry {\n\t\t\tconst res = await axios.post(\n\t\t\t\t\"http://localhost:5000/addProducts/\",\n\t\t\t\tbody,\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_PRODUCTS,\n\t\t\t\tpayload: res.data,\n\t\t\t});\n\n\t\t\tdispatch(loadUser());\n\t\t} catch (err) {\n\t\t\tconst errors = err.response.data.errors;\n\n\t\t\tif (errors) {\n\t\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n\t\t\t}\n\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_FAIL,\n\t\t\t});\n\t\t}\n\t};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}