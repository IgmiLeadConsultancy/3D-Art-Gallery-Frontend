{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert2\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\";\nimport setAuthToken2 from \"../utils/setauthToken2\";\n\n// Load User\nexport const loadUsers = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken2(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"http://localhost:5000/user/login\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const registerusers = _ref => {\n  let {\n    fname,\n    lname,\n    email,\n    phn,\n    pass\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      fname,\n      lname,\n      email,\n      phn,\n      pass\n    });\n    try {\n      const res = await axios.post(\"http://localhost:5000/register\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUsers());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};\n\n// Login User\nexport const loginuser = (email, pass) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    pass\n  });\n  try {\n    const res = await axios.post(\"http://localhost:5000/user/login\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUsers());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken2","loadUsers","dispatch","localStorage","token","res","get","type","payload","data","err","registerusers","fname","lname","email","phn","pass","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","loginuser","logout"],"sources":["C:/FF/frontend/src/actions/auth2.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert2\";\r\nimport {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL,\r\n\tUSER_LOADED,\r\n\tAUTH_ERROR,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT,\r\n} from \"./types\";\r\nimport setAuthToken2 from \"../utils/setauthToken2\";\r\n\r\n// Load User\r\nexport const loadUsers = () => async (dispatch) => {\r\n\tif (localStorage.token) {\r\n\t\tsetAuthToken2(localStorage.token);\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst res = await axios.get(\"http://localhost:5000/user/login\");\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: AUTH_ERROR,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// Register User\r\nexport const registerusers =\r\n\t({ fname,lname,email, phn, pass }) =>\r\n\tasync (dispatch) => {\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst body = JSON.stringify({ fname,lname,email, phn, pass });\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(\r\n\t\t\t\t\"http://localhost:5000/register\",\r\n\t\t\t\tbody,\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\t\tpayload: res.data,\r\n\t\t\t});\r\n\r\n\t\t\tdispatch(loadUsers());\r\n\t\t} catch (err) {\r\n\t\t\tconst errors = err.response.data.errors;\r\n\r\n\t\t\tif (errors) {\r\n\t\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n\t\t\t}\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: REGISTER_FAIL,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n// Login User\r\nexport const loginuser = (email, pass) => async (dispatch) => {\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t},\r\n\t};\r\n\r\n\tconst body = JSON.stringify({ email, pass });\r\n\r\n\ttry {\r\n\t\tconst res = await axios.post(\r\n\t\t\t\"http://localhost:5000/user/login\",\r\n\t\t\tbody,\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\r\n\t\tdispatch(loadUsers());\r\n\t} catch (err) {\r\n\t\tconst errors = err.response.data.errors;\r\n\r\n\t\tif (errors) {\r\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n\t\t}\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_FAIL,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// Logout / Clear Profile\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tdispatch({ type: LOGOUT });\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,UAAU;AACnC,SACCC,gBAAgB,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,UAAU,EACVC,MAAM,QACA,SAAS;AAChB,OAAOC,aAAa,MAAM,wBAAwB;;AAElD;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAQ,IAAK;EAClD,IAAIC,YAAY,CAACC,KAAK,EAAE;IACvBJ,aAAa,CAACG,YAAY,CAACC,KAAK,CAAC;EAClC;EAEA,IAAI;IACH,MAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,kCAAkC,CAAC;IAE/DJ,QAAQ,CAAC;MACRK,IAAI,EAAEZ,WAAW;MACjBa,OAAO,EAAEH,GAAG,CAACI;IACd,CAAC,CAAC;EACH,CAAC,CAAC,OAAOC,GAAG,EAAE;IACbR,QAAQ,CAAC;MACRK,IAAI,EAAEX;IACP,CAAC,CAAC;EACH;AACD,CAAC;;AAED;AACA,OAAO,MAAMe,aAAa,GACzB;EAAA,IAAC;IAAEC,KAAK;IAACC,KAAK;IAACC,KAAK;IAAEC,GAAG;IAAEC;EAAK,CAAC;EAAA,OACjC,MAAOd,QAAQ,IAAK;IACnB,MAAMe,MAAM,GAAG;MACdC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB;IACD,CAAC;IAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAET,KAAK;MAACC,KAAK;MAACC,KAAK;MAAEC,GAAG;MAAEC;IAAK,CAAC,CAAC;IAE7D,IAAI;MACH,MAAMX,GAAG,GAAG,MAAMd,KAAK,CAAC+B,IAAI,CAC3B,gCAAgC,EAChCH,IAAI,EACJF,MAAM,CACN;MAEDf,QAAQ,CAAC;QACRK,IAAI,EAAEd,gBAAgB;QACtBe,OAAO,EAAEH,GAAG,CAACI;MACd,CAAC,CAAC;MAEFP,QAAQ,CAACD,SAAS,EAAE,CAAC;IACtB,CAAC,CAAC,OAAOS,GAAG,EAAE;MACb,MAAMa,MAAM,GAAGb,GAAG,CAACc,QAAQ,CAACf,IAAI,CAACc,MAAM;MAEvC,IAAIA,MAAM,EAAE;QACXA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKxB,QAAQ,CAACV,QAAQ,CAACkC,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;MACnE;MAEAzB,QAAQ,CAAC;QACRK,IAAI,EAAEb;MACP,CAAC,CAAC;IACH;EACD,CAAC;AAAA;;AAEF;AACA,OAAO,MAAMkC,SAAS,GAAG,CAACd,KAAK,EAAEE,IAAI,KAAK,MAAOd,QAAQ,IAAK;EAC7D,MAAMe,MAAM,GAAG;IACdC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB;EACD,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEP,KAAK;IAAEE;EAAK,CAAC,CAAC;EAE5C,IAAI;IACH,MAAMX,GAAG,GAAG,MAAMd,KAAK,CAAC+B,IAAI,CAC3B,kCAAkC,EAClCH,IAAI,EACJF,MAAM,CACN;IAEDf,QAAQ,CAAC;MACRK,IAAI,EAAEV,aAAa;MACnBW,OAAO,EAAEH,GAAG,CAACI;IACd,CAAC,CAAC;IAEFP,QAAQ,CAACD,SAAS,EAAE,CAAC;EACtB,CAAC,CAAC,OAAOS,GAAG,EAAE;IACb,MAAMa,MAAM,GAAGb,GAAG,CAACc,QAAQ,CAACf,IAAI,CAACc,MAAM;IAEvC,IAAIA,MAAM,EAAE;MACXA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKxB,QAAQ,CAACV,QAAQ,CAACkC,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnE;IAEAzB,QAAQ,CAAC;MACRK,IAAI,EAAET;IACP,CAAC,CAAC;EACH;AACD,CAAC;;AAED;;AAEA,OAAO,MAAM+B,MAAM,GAAG,MAAO3B,QAAQ,IAAK;EACzCA,QAAQ,CAAC;IAAEK,IAAI,EAAER;EAAO,CAAC,CAAC;AAC3B,CAAC"},"metadata":{},"sourceType":"module"}