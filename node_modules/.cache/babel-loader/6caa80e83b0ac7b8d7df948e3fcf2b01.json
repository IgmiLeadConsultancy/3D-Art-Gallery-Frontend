{"ast":null,"code":"var _jsxFileName = \"C:\\\\3D Gallery\\\\frontend\\\\src\\\\components\\\\Room.jsx\",\n  _s = $RefreshSig$();\nimport * as THREE from 'three';\nimport { useEffect, useState } from 'react';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls.js';\nimport image2 from '../img/saturn.jpg';\nimport nebula from '../img/Floor.jpg';\nimport starts from '../img/stars.jpg';\nimport floor from '../img/top2.jpg';\nimport room from '../img/room.jpg';\nimport windows from '../img/window.png';\nimport axios from 'axios';\n\n//CSS//\n// import '../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Room() {\n  _s();\n  // Fetching The First Wall Collection   \n  const [CollectionData1, setCollectionData1] = useState([]);\n  const getCollectionData1 = async () => {\n    try {\n      const resp = await axios.get(\"http://localhost:5000/Fetch-Products1\");\n      setCollectionData1(resp.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getCollectionData1();\n  }, []);\n  let img = undefined;\n  {\n    CollectionData1 && CollectionData1.map(cd => img = require(`../uploads/${cd.collectionsImg}`).default);\n  }\n\n  // Fetching The Second Wall Collection   \n  const [CollectionData2, setCollectionData2] = useState([]);\n  const getCollectionData2 = async () => {\n    try {\n      const resp = await axios.get(\"http://localhost:5000/Fetch-Products2\");\n      setCollectionData2(resp.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getCollectionData2();\n  }, []);\n  let img2 = undefined;\n  {\n    CollectionData2 && CollectionData2.map(cd => img2 = require(`../uploads/${cd.collectionsImg}`).default);\n  }\n\n  // Fetching The Second Wall Collection   \n  const [CollectionData3, setCollectionData3] = useState([]);\n  const getCollectionData3 = async () => {\n    try {\n      const resp = await axios.get(\"http://localhost:5000/Fetch-Products2\");\n      setCollectionData2(resp.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getCollectionData3();\n  }, []);\n  let img3 = undefined;\n  {\n    CollectionData2 && CollectionData2.map(cd => img3 = require(`../uploads/${cd.collectionsImg}`).default);\n  }\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    // Controls\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 2000);\n    scene.add(camera); // add the camera to the scene\n    camera.position.z = 5; // move camera back 5 units\n    // camera.rotation.x = Math.PI / 360;\n    // camera.rotation.y = Math.PI / 360;\n    // camera.lookAt(10,10,0);\n    // camera.position.y = 5;\n    // camera.position.z = 4;\n    camera.position.set(-1067.29, 30.23, 40.82);\n    // Create a render and set the size and background color\n\n    const canvas = document.querySelector('#mycanvas'); // Canvas id //\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      alpha: true\n    }); // antialias means smooth edges\n    renderer.setSize(window.innerWidth, window.innerHeight); // set size of renderer\n    renderer.setClearColor(0xbbbbb, 1); //background color\n    document.body.appendChild(renderer.domElement); // add renderer to html\n\n    //   function random(min, max) {\n    //     return min + Math.random() * (max - min);\n    // }\n\n    // window //\n    // 1 //\n    const wingeometry = new THREE.PlaneGeometry(5, 3.5);\n    const winmaterial = new THREE.MeshBasicMaterial({\n      //color: 0x000, \n      side: THREE.DoubleSide,\n      map: textureLoader.load(windows)\n    });\n    const winplane = new THREE.Mesh(wingeometry, winmaterial);\n    scene.add(winplane);\n    winplane.position.setFromCylindricalCoords(-18, 3.6, 2.2);\n    winplane.position.x = -12;\n    //winplane.position.y = -1;\n    //winplane.position.x = 10;\n\n    // 2 //\n    // const wingeometry2 = new THREE.PlaneGeometry( 4, 3 );\n    // const winmaterial2 = new THREE.MeshBasicMaterial( {\n    //  // color: 0x1b1c26, \n    //   side: THREE.DoubleSide,\n    //   map: textureLoader.load(windows)\n    // } );\n    // const winplane2 = new THREE.Mesh( wingeometry2, winmaterial2 );\n    // scene.add( winplane2 );\n    // winplane2.position.setFromCylindricalCoords(13, 4.7, 2);\n    // winplane2.rotation.y = 20;\n    // winplane2.position.x = -12;\n    //winplane2.rotation.x= -16;\n    //winplane.position.y = -1;\n    //winplane.position.x = 10;\n\n    // window  3//\n    // const wingeometry3 = new THREE.PlaneGeometry( 4, 3.5);\n    // const winmaterial3 = new THREE.MeshBasicMaterial( {\n    // //  color: 0x1b1c26, \n    //   side: THREE.DoubleSide,\n    //   map: textureLoader.load(windows)\n    // } );\n    // const winplane3 = new THREE.Mesh( wingeometry3, winmaterial3 );\n    // scene.add( winplane3 );\n    // winplane3.position.setFromCylindricalCoords(15, 5, 2);\n    //winplane3.rotation.y = 10;\n    //winplane3.position.x = 12;\n    //winplane3.rotation.x= -16;\n    //winplane3.position.y = 2;\n    //winplane.position.x = 10;\n\n    // sofa //\n    // const  sofageometry = new THREE.BoxGeometry( 4, 3.5);\n    // const sofamaterial = new THREE.MeshLambertMaterial( {\n    //   //color: 0xFFFFFF,\n    //   //side: THREE.DoubleSide,\n    //   map: textureLoader.load(sofa)\n    // } );\n\n    // const  sofaplane = new THREE.Mesh( sofageometry, sofamaterial );\n    // scene.add( sofaplane );\n    // sofaplane.position.setFromCylindricalCoords(10, 9, 1);\n    // //sofaplane.rotation.y = 10;\n    // sofaplane.position.x = 0;\n    // sofaplane.position.y =  -0.5;\n\n    //  var carTextureLoaders = new textureLoader.load(sofa);\n    //  car = new THREE.Mesh(\n    //   new THREE.BoxGeometry(200,100,5),\n    //   new THREE.MeshLambertMaterial(\n    //    { map:carTextureLoaders,\n\n    //    })\n\n    //  );\n    // scene.add(car)\n\n    //Door 1 //\n\n    //   const doorgeometry = new THREE.PlaneGeometry( 6, 7 );\n    //   const doormaterial = new THREE.MeshBasicMaterial( {\n    //   //  color: 0x1b1c26, \n    //     side: THREE.DoubleSide,\n    //     map: textureLoader.load(door)\n    //   } );\n    //   const doorplane = new THREE.Mesh( doorgeometry, doormaterial );\n    //   scene.add( doorplane );\n    //   doorplane.position.setFromCylindricalCoords(10, 3.5, 2);\n    //   doorplane.rotation.y = 30;\n    //   doorplane.position.x = 19;\n    //  // doorplane.rotation.x=0.02;\n    //   //winplane.position.y = -1;\n    //   //winplane.position.x = 10;\n\n    // new wall //\n    // const newfrontWallGeometry = new  THREE.BoxGeometry(20,10,0.5);\n    // const newfrontWallMaterial = new  THREE.MeshBasicMaterial({\n    //   color: \"grey\",\n    //   map: textureLoader.load(image2)\n    // });\n    // const  newfrontWall = new THREE.Mesh( newfrontWallGeometry, newfrontWallMaterial );\n    // newfrontWall.position.setFromCylindricalCoords(10, 1, 2);\n    // scene.add(newfrontWall);\n    // newfrontWall.position.x = -13;\n    // //newfrontWall.position.y = 20;\n    // newfrontWall.rotation.x= 0;\n\n    //new wall 2 //\n\n    // const newfrontWallGeometry2 = new  THREE.BoxGeometry(15,10,0.5);\n    // const newfrontWallMaterial2 = new  THREE.MeshBasicMaterial({\n    //  color: \"grey\",\n    //  map: textureLoader.load(image2)\n    // });\n    // const  newfrontWall2 = new THREE.Mesh( newfrontWallGeometry2, newfrontWallMaterial2 );\n    // newfrontWall2.position.setFromCylindricalCoords(10, 1, 2);\n    // scene.add(newfrontWall2);\n    // newfrontWall2.position.x = 13;\n    //newfrontWall.position.y = 20;\n    // newfrontWall2.rotation.x= 0;\n\n    // new wall images //\n\n    // const newwallimggeometry = new THREE.PlaneGeometry( 5, 4 );\n\n    // const newwallimgmaterial = new THREE.MeshBasicMaterial( {\n    //   //color: 0xffff00, \n    //   map: textureLoader.load(starts),\n    //   side: THREE.DoubleSide,\n    // } );\n    // const  newwallimgplane = new THREE.Mesh( newwallimggeometry, newwallimgmaterial );\n    // scene.add( newwallimgplane )\n    // newwallimgplane.position.x = 20;\n    // newwallimgplane.position.setFromCylindricalCoords(18, 5, 0);\n    // newwallimgplane.rotation.x= 0;\n\n    // newwallimgplane.position.x = -10;\n    // newwallimgplane.position.y = 2;\n\n    // Wall  img 1 //\n\n    let creactgroup = (name, x, y, z, a, b, c) => {\n      const geometry2 = new THREE.BoxGeometry(5, 3, 0.09);\n      const material2 = new THREE.MeshBasicMaterial({\n        side: THREE.DoubleSide,\n        map: new THREE.TextureLoader().load(img)\n      });\n      const plane = new THREE.Mesh(geometry2, material2);\n      plane.position.setFromCylindricalCoords(x, y, z);\n      // plane.position.x= -6;\n      // plane.position.y= 0.5;\n      plane.position.set(a, b, c);\n      plane.name = name;\n      return plane;\n    };\n    const group = new THREE.Group();\n    let supermash1 = creactgroup('supermash1');\n    supermash1.position.setFromCylindricalCoords(-15, 3, 2);\n    supermash1.position.x = 17;\n    group.add(supermash1);\n    const supermash2 = creactgroup('supermash2');\n    supermash2.position.setFromCylindricalCoords(-15, -3, 2);\n    supermash1.position.x = 8;\n    group.add(supermash2);\n    const supermash3 = creactgroup('supermash3');\n    supermash3.position.setFromCylindricalCoords(-15, 3, 2);\n    supermash3.position.x = -4;\n    group.add(supermash3);\n\n    // Wall img  2 //\n\n    let creactgroup2 = (name, x, y, z, a, b, c) => {\n      const geometry2 = new THREE.BoxGeometry(5, 3, 0.09);\n      const material2 = new THREE.MeshBasicMaterial({\n        side: THREE.DoubleSide,\n        map: new THREE.TextureLoader().load(img2)\n      });\n      const plane = new THREE.Mesh(geometry2, material2);\n      plane.position.setFromCylindricalCoords(x, y, z);\n      // plane.position.x= -6;\n      // plane.position.y= 0.5;\n      plane.position.set(a, b, c);\n      plane.name = name;\n      return plane;\n    };\n    const supermashWall1 = creactgroup2('supermashwall1');\n    supermashWall1.position.setFromCylindricalCoords(15, 3, 2.6);\n    supermashWall1.position.x = 9;\n    group.add(supermashWall1);\n    const supermashWall2 = creactgroup2('supermashwall2');\n    supermashWall2.position.setFromCylindricalCoords(15, 3, 2.6);\n    supermashWall2.position.x = 0;\n    group.add(supermashWall2);\n    const supermashWall3 = creactgroup2('supermashwall3');\n    supermashWall3.position.setFromCylindricalCoords(15, 3, 2.6);\n    supermashWall3.position.x = -9;\n    group.add(supermashWall3);\n\n    //Wall img  3 //\n\n    let creactgroup3 = (name, x, y, z, a, b, c) => {\n      const geometry3 = new THREE.BoxGeometry(5, 3, 0.09);\n      const material3 = new THREE.MeshBasicMaterial({\n        side: THREE.DoubleSide,\n        map: new THREE.TextureLoader().load(img3)\n      });\n      const plane = new THREE.Mesh(geometry3, material3);\n      plane.position.setFromCylindricalCoords(x, y, z);\n      // plane.position.x= -6;\n      // plane.position.y= 0.5;\n      plane.position.set(a, b, c);\n      plane.name = name;\n      return plane;\n    };\n    const supermashWallLeft2 = creactgroup3('supermashWallLeft2');\n    supermashWallLeft2.position.setFromCylindricalCoords(10, 4, 2);\n    supermashWallLeft2.position.x = 13;\n    supermashWallLeft2.rotation.y = 30;\n    group.add(supermashWallLeft2);\n    const supermashWallLeft3 = creactgroup3('supermashWallLeft2');\n    supermashWallLeft3.position.setFromCylindricalCoords(10, 4.9, 2);\n    supermashWallLeft3.position.x = 15;\n    //supermashWallLeft3.position.y=10;\n    supermashWallLeft3.rotation.y = 30;\n    group.add(supermashWallLeft3);\n    const supermashWallLeft1 = creactgroup3('supermashWallLeft1');\n    supermashWallLeft1.position.setFromCylindricalCoords(-10, 3, 2);\n    supermashWallLeft1.position.x = 15;\n    supermashWallLeft1.rotation.y = 30;\n    group.add(supermashWallLeft1);\n\n    //Wall img  4 //\n\n    let creactgroup6 = (name, x, y, z, a, b, c) => {\n      const geometry5 = new THREE.BoxGeometry(5, 3, 0.09);\n      const material5 = new THREE.MeshBasicMaterial({\n        side: THREE.DoubleSide,\n        map: new THREE.TextureLoader().load(room)\n      });\n      const plane = new THREE.Mesh(geometry5, material5);\n      plane.position.setFromCylindricalCoords(x, y, z);\n      // plane.position.x= -6;\n      // plane.position.y= 0.5;\n      plane.position.set(a, b, c);\n      plane.name = name;\n      return plane;\n    };\n    const supermashWallLeft11 = creactgroup6('supermashWallLeft11');\n    supermashWallLeft11.position.setFromCylindricalCoords(-8, 3, 2);\n    supermashWallLeft11.position.x = -13;\n    supermashWallLeft11.rotation.y = 36;\n    //supermashWallLeft11.rotation.z = -3;\n    group.add(supermashWallLeft11);\n    const supermashWallLeft12 = creactgroup6('supermashWallLeft12');\n    supermashWallLeft12.position.setFromCylindricalCoords(-1, 2, 2);\n    supermashWallLeft12.position.x = -13;\n    supermashWallLeft12.rotation.y = 30;\n    group.add(supermashWallLeft12);\n    const supermashWallLeft15 = creactgroup6('supermashWallLeft15');\n    supermashWallLeft15.position.setFromCylindricalCoords(10, 4, 2);\n    supermashWallLeft15.position.x = -13;\n    supermashWallLeft15.rotation.y = 36;\n    group.add(supermashWallLeft15);\n    scene.add(group);\n\n    // Texture of the floor\n    const floorTexture = new THREE.TextureLoader().load(floor); // ImageUtils is deprecated in the newer versions of THREE.js\n    floorTexture.wrapS = THREE.RepeatWrapping; // wrapS is horizonatl direction\n    floorTexture.wrapT = THREE.RepeatWrapping; // wrapT the vertical direction\n    floorTexture.repeat.set(1, 1); // how many times to repeat the texture\n\n    // let floorTexture = new THREE.TextureLoader().load('img/Floor.jpg');\n    // textureLoader.load('img/Floor.jpg');cds\n\n    // Create the floor plane.\n    const planeGeometry = new THREE.PlaneBufferGeometry(45, 45); // BoxGeometry is the shape of the object\n    const planeMaterial = new THREE.MeshBasicMaterial({\n      // MeshBasicMaterial is the look of the object (color or texture)\n      map: floorTexture,\n      // the texture\n      side: THREE.DoubleSide\n    });\n    const floorPlane = new THREE.Mesh(planeGeometry, planeMaterial); // create the floor with geometry and material\n\n    floorPlane.rotation.x = Math.PI / 2; // this is 90 degrees\n    floorPlane.position.y = -Math.PI; // this is -180 degrees\n\n    scene.add(floorPlane); // add the floor to the scene\n\n    // Create the walls\n    let wallGroup = new THREE.Group(); // create a group to hold the walls\n    scene.add(wallGroup); // add the group to the scene, then any child added to the group will display to the scene too\n\n    // Front Wall //\n    const frontWallGeometry = new THREE.BoxGeometry(50, 20, 0.001);\n    const frontWallMaterial = new THREE.MeshBasicMaterial({\n      // color: \"grey\",\n      map: textureLoader.load(image2)\n    });\n    const frontWall = new THREE.Mesh(frontWallGeometry, frontWallMaterial);\n    scene.add(frontWall);\n    frontWall.position.z = -20;\n\n    //back Wall//\n    const backWallGeometry = new THREE.BoxGeometry(50, 30, 0.001);\n    const backWallMaterial = new THREE.MeshBasicMaterial({\n      //color: \"grey\",\n      map: textureLoader.load(image2)\n    });\n    const backWall = new THREE.Mesh(backWallGeometry, backWallMaterial);\n    scene.add(backWall);\n    backWall.position.z = 20;\n\n    // Left Wall\n    const leftWallGeometry = new THREE.BoxGeometry(50, 30, 0.001);\n    const leftWallMaterial = new THREE.MeshBasicMaterial({\n      // color: 'lightgrey',\n      map: textureLoader.load(image2)\n    });\n    const leftWall = new THREE.Mesh(leftWallGeometry, leftWallMaterial);\n    scene.add(leftWall);\n    leftWall.rotation.y = Math.PI / 2; // this is 90 degrees\n    leftWall.position.x = -20; // -20 is for 20 units left\n    leftWall.rotation.y = Math.PI / 2; // this is 90 degrees\n    leftWall.position.x = -20; // -20 is for 20 units left\n\n    // Right Wall\n    const rightWallGeometry = new THREE.BoxGeometry(50, 30, 0.001);\n    const rightWallMaterial = new THREE.MeshBasicMaterial({\n      //color: 'lightgrey',\n      map: textureLoader.load(image2)\n    });\n    const rightWall = new THREE.Mesh(rightWallGeometry, rightWallMaterial);\n    scene.add(rightWall);\n    rightWall.position.x = 20;\n    rightWall.rotation.y = Math.PI / 2; // this is 90 degrees\n\n    wallGroup.add(frontWall, leftWall, rightWall);\n\n    // Loop through each wall and create the bounding box\n    for (let i = 0; i < wallGroup.children.length; i++) {\n      wallGroup.children[i].Box = new THREE.Box3();\n      wallGroup.children[i].Box.setFromObject(wallGroup.children[i]);\n    }\n\n    // Create the ceiling\n    const ceilingGeometry = new THREE.PlaneBufferGeometry(1000, 90); // BoxGeometry is the shape the object\n    const ceilingMaterial = new THREE.MeshBasicMaterial({\n      // Lambert material is for non-shiny surfaces \n      //color: 'lavagrey',\n      map: textureLoader.load(nebula)\n    });\n    const ceilingPlane = new THREE.Mesh(ceilingGeometry, ceilingMaterial); // create ceiling with geometry and material\n\n    ceilingPlane.rotation.x = Math.PI / 2; // this is 90 degrees\n    ceilingPlane.position.y = 8;\n    scene.add(ceilingPlane);\n\n    // renderer.setClearColor(0xFFEA00);\n    //  const  textureLoader = new THREE.TextureLoader();\n\n    //scene.background = textureLoader.load(stars, );\n    // const cubeTextureLoader = new THREE.CubeTextureLoader();\n\n    // scene.background = cubeTextureLoader.load([\n    //   starsTexture,\n    //   starsTexture,\n    //   starsTexture ,\n    //   starsTexture,\n    //   starsTexture,\n    //   starsTexture,\n\n    //   ]);\n\n    const fpcontrols = new FirstPersonControls(camera, document.body);\n    fpcontrols.movementSpeed = 150;\n    fpcontrols.lookSpeed = 0.1;\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    //controls.enablePan = false;\n    //controls.enableDamping = true;\n    //controls.rotateSpeed = - 0.25\n    controls.minDistance = 2;\n    controls.maxDistance = 5;\n    controls.maxZoom = 600;\n    controls.zoomSpeed = 2;\n    //controls.panSpeed = 2;\n    controls.rotateSpeed = 2;\n    //controls.autoRotate = true;\n    //controls.enableDamping = true;\n    //controls.screenSpacePanning =false;\n    // controls.keys = {\n    //   LEFT: 'ArrowLeft',\n    //   UP : 'ArrowUp',\n    //   RIGHT: 'ArrowRight',\n    //   BOTTOM : 'ArrowDown'\n    // }\n    controls.listenToKeyEvents(window);\n    controls.minPolarAngle = Math.PI / 2;\n    controls.maxPolarAngle = Math.PI / 6;\n\n    // \n\n    // Movement //\n    // let position = 0;\n    // window.addEventListener('mouseup', function() {\n    //   switch(position) {\n    //       case 0:\n    //           moveCamera(-1.8, -1.6, -10);\n    //           rotateCamera(10, 10, 10);\n    //           position = 1;\n    //           camera.zoom = 2;\n    //           break;\n\n    //           case 1:\n    //             moveCamera(1, 1, -10);\n    //             rotateCamera(15, 15, 15);\n    //             position = 2;\n    //             camera.zoom = 4;\n    //             break;\n\n    //   }\n\n    // })\n    //   function moveCamera(x, y, z) {\n    //         gsap.to(camera.position, {\n    //             x,\n    //             y,\n    //             z,\n    //             duration: 3\n    //         });\n    //     }\n\n    //     function rotateCamera(x, y, z) {\n    //         gsap.to(camera.rotation, {\n    //             x,\n    //             y,\n    //             z,\n    //             duration: 3.2\n    //         });\n    //     }\n\n    // Event Listenet for when we press the keys\n    document.addEventListener('keydown', onKeyDown, false);\n    // // function when a key is pressed, execute this function\n    function onKeyDown(event) {\n      let keycode = event.which;\n\n      // right arrow key\n      if (keycode === 39) {\n        camera.translateY(-0.05);\n      }\n      // left arrow key\n      else if (keycode === 37) {\n        camera.translateY(0.05);\n      }\n\n      // up arrow key\n      else if (keycode === 38) {\n        camera.translateZ(0);\n      }\n      // down arrow key\n      else if (keycode === 40) {\n        camera.translateZ(0);\n      }\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    ;\n    animate();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"mycanvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n\n          body{\n            display: block;\n            overflow: hidden;\n          }\n          \n          canvas:nth-child(1){\n            display:none!important;\n          }\n          \n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 738,\n    columnNumber: 5\n  }, this);\n}\n_s(Room, \"KLDomNNNfCqsNf/rhi6TMFPD2Aw=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["THREE","useEffect","useState","OrbitControls","FirstPersonControls","image2","nebula","starts","floor","room","windows","axios","Room","CollectionData1","setCollectionData1","getCollectionData1","resp","get","data","error","console","log","img","undefined","map","cd","require","collectionsImg","default","CollectionData2","setCollectionData2","getCollectionData2","img2","CollectionData3","setCollectionData3","getCollectionData3","img3","scene","Scene","textureLoader","TextureLoader","camera","PerspectiveCamera","window","innerWidth","innerHeight","add","position","z","set","canvas","document","querySelector","renderer","WebGLRenderer","alpha","setSize","setClearColor","body","appendChild","domElement","wingeometry","PlaneGeometry","winmaterial","MeshBasicMaterial","side","DoubleSide","load","winplane","Mesh","setFromCylindricalCoords","x","creactgroup","name","y","a","b","c","geometry2","BoxGeometry","material2","plane","group","Group","supermash1","supermash2","supermash3","creactgroup2","supermashWall1","supermashWall2","supermashWall3","creactgroup3","geometry3","material3","supermashWallLeft2","rotation","supermashWallLeft3","supermashWallLeft1","creactgroup6","geometry5","material5","supermashWallLeft11","supermashWallLeft12","supermashWallLeft15","floorTexture","wrapS","RepeatWrapping","wrapT","repeat","planeGeometry","PlaneBufferGeometry","planeMaterial","floorPlane","Math","PI","wallGroup","frontWallGeometry","frontWallMaterial","frontWall","backWallGeometry","backWallMaterial","backWall","leftWallGeometry","leftWallMaterial","leftWall","rightWallGeometry","rightWallMaterial","rightWall","i","children","length","Box","Box3","setFromObject","ceilingGeometry","ceilingMaterial","ceilingPlane","fpcontrols","movementSpeed","lookSpeed","controls","minDistance","maxDistance","maxZoom","zoomSpeed","rotateSpeed","listenToKeyEvents","minPolarAngle","maxPolarAngle","addEventListener","onKeyDown","event","keycode","which","translateY","translateZ","animate","requestAnimationFrame","update","render"],"sources":["C:/3D Gallery/frontend/src/components/Room.jsx"],"sourcesContent":["\r\nimport * as THREE from 'three';\r\nimport { useEffect, useState } from 'react';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls.js'\r\n\r\nimport image2 from '../img/saturn.jpg';\r\nimport nebula from '../img/Floor.jpg';\r\nimport starts from '../img/stars.jpg';\r\nimport floor from '../img/top2.jpg';\r\nimport room from '../img/room.jpg';\r\nimport windows from '../img/window.png';\r\nimport axios from 'axios';\r\n\r\n//CSS//\r\n// import '../../src/App.css';\r\n\r\nfunction Room() {\r\n\r\n // Fetching The First Wall Collection   \r\n  const [CollectionData1, setCollectionData1] = useState([]);\r\n\r\n  const getCollectionData1 = async () => {\r\n    try {\r\n      const resp = await axios.get(\"http://localhost:5000/Fetch-Products1\");\r\n      setCollectionData1(resp.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCollectionData1();\r\n  }, []);\r\n\r\n\r\n  let img = undefined;\r\n\r\n  {\r\n    CollectionData1 &&\r\n    CollectionData1.map((cd) => (\r\n\r\n      img = require(`../uploads/${cd.collectionsImg}`).default\r\n\r\n\r\n    ))\r\n  } \r\n\r\n // Fetching The Second Wall Collection   \r\n const [CollectionData2, setCollectionData2] = useState([]);\r\n\r\n const getCollectionData2 = async () => {\r\n   try {\r\n     const resp = await axios.get(\"http://localhost:5000/Fetch-Products2\");\r\n     setCollectionData2(resp.data);\r\n   } catch (error) {\r\n     console.log(error);\r\n   }\r\n };\r\n\r\n useEffect(() => {\r\n  getCollectionData2();\r\n }, []);\r\n\r\n\r\n let img2 = undefined;\r\n\r\n {\r\n   CollectionData2 &&\r\n   CollectionData2.map((cd) => (\r\n\r\n     img2 = require(`../uploads/${cd.collectionsImg}`).default\r\n\r\n   ))\r\n }\r\n\r\n\r\n\r\n\r\n // Fetching The Second Wall Collection   \r\n const [CollectionData3, setCollectionData3] = useState([]);\r\n\r\n const getCollectionData3 = async () => {\r\n   try {\r\n     const resp = await axios.get(\"http://localhost:5000/Fetch-Products2\");\r\n     setCollectionData2(resp.data);\r\n   } catch (error) {\r\n     console.log(error);\r\n   }\r\n };\r\n\r\n useEffect(() => {\r\n  getCollectionData3();\r\n }, []);\r\n\r\n\r\n let img3 = undefined;\r\n\r\n {\r\n   CollectionData2 &&\r\n   CollectionData2.map((cd) => (\r\n\r\n     img3 = require(`../uploads/${cd.collectionsImg}`).default\r\n\r\n   ))\r\n }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const textureLoader = new THREE.TextureLoader();\r\n\r\n\r\n    // Controls\r\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 2000);\r\n\r\n    scene.add(camera); // add the camera to the scene\r\n    camera.position.z = 5; // move camera back 5 units\r\n    // camera.rotation.x = Math.PI / 360;\r\n    // camera.rotation.y = Math.PI / 360;\r\n    // camera.lookAt(10,10,0);\r\n    // camera.position.y = 5;\r\n    // camera.position.z = 4;\r\n    camera.position.set(-1067.29, 30.23, 40.82);\r\n    // Create a render and set the size and background color\r\n\r\n\r\n    const canvas = document.querySelector('#mycanvas'); // Canvas id //\r\n\r\n    const renderer = new THREE.WebGLRenderer({ \r\n      canvas, alpha: true\r\n     }); // antialias means smooth edges\r\n    renderer.setSize(window.innerWidth, window.innerHeight); // set size of renderer\r\n    renderer.setClearColor(0xbbbbb, 1); //background color\r\n    document.body.appendChild(renderer.domElement); // add renderer to html\r\n\r\n\r\n\r\n    //   function random(min, max) {\r\n    //     return min + Math.random() * (max - min);\r\n    // }\r\n\r\n\r\n\r\n    // window //\r\n    // 1 //\r\n    const wingeometry = new THREE.PlaneGeometry(5, 3.5);\r\n    const winmaterial = new THREE.MeshBasicMaterial({\r\n      //color: 0x000, \r\n      side: THREE.DoubleSide,\r\n      map: textureLoader.load(windows)\r\n    });\r\n    const winplane = new THREE.Mesh(wingeometry, winmaterial);\r\n    scene.add(winplane);\r\n    winplane.position.setFromCylindricalCoords(-18, 3.6, 2.2);\r\n    winplane.position.x = -12;\r\n    //winplane.position.y = -1;\r\n    //winplane.position.x = 10;\r\n\r\n    // 2 //\r\n    // const wingeometry2 = new THREE.PlaneGeometry( 4, 3 );\r\n    // const winmaterial2 = new THREE.MeshBasicMaterial( {\r\n    //  // color: 0x1b1c26, \r\n    //   side: THREE.DoubleSide,\r\n    //   map: textureLoader.load(windows)\r\n    // } );\r\n    // const winplane2 = new THREE.Mesh( wingeometry2, winmaterial2 );\r\n    // scene.add( winplane2 );\r\n    // winplane2.position.setFromCylindricalCoords(13, 4.7, 2);\r\n    // winplane2.rotation.y = 20;\r\n    // winplane2.position.x = -12;\r\n    //winplane2.rotation.x= -16;\r\n    //winplane.position.y = -1;\r\n    //winplane.position.x = 10;\r\n\r\n    // window  3//\r\n    // const wingeometry3 = new THREE.PlaneGeometry( 4, 3.5);\r\n    // const winmaterial3 = new THREE.MeshBasicMaterial( {\r\n    // //  color: 0x1b1c26, \r\n    //   side: THREE.DoubleSide,\r\n    //   map: textureLoader.load(windows)\r\n    // } );\r\n    // const winplane3 = new THREE.Mesh( wingeometry3, winmaterial3 );\r\n    // scene.add( winplane3 );\r\n    // winplane3.position.setFromCylindricalCoords(15, 5, 2);\r\n    //winplane3.rotation.y = 10;\r\n    //winplane3.position.x = 12;\r\n    //winplane3.rotation.x= -16;\r\n    //winplane3.position.y = 2;\r\n    //winplane.position.x = 10;\r\n\r\n    // sofa //\r\n    // const  sofageometry = new THREE.BoxGeometry( 4, 3.5);\r\n    // const sofamaterial = new THREE.MeshLambertMaterial( {\r\n    //   //color: 0xFFFFFF,\r\n    //   //side: THREE.DoubleSide,\r\n    //   map: textureLoader.load(sofa)\r\n    // } );\r\n\r\n    // const  sofaplane = new THREE.Mesh( sofageometry, sofamaterial );\r\n    // scene.add( sofaplane );\r\n    // sofaplane.position.setFromCylindricalCoords(10, 9, 1);\r\n    // //sofaplane.rotation.y = 10;\r\n    // sofaplane.position.x = 0;\r\n    // sofaplane.position.y =  -0.5;\r\n\r\n\r\n\r\n    //  var carTextureLoaders = new textureLoader.load(sofa);\r\n    //  car = new THREE.Mesh(\r\n    //   new THREE.BoxGeometry(200,100,5),\r\n    //   new THREE.MeshLambertMaterial(\r\n    //    { map:carTextureLoaders,\r\n\r\n    //    })\r\n\r\n    //  );\r\n    // scene.add(car)\r\n\r\n    //Door 1 //\r\n\r\n\r\n    //   const doorgeometry = new THREE.PlaneGeometry( 6, 7 );\r\n    //   const doormaterial = new THREE.MeshBasicMaterial( {\r\n    //   //  color: 0x1b1c26, \r\n    //     side: THREE.DoubleSide,\r\n    //     map: textureLoader.load(door)\r\n    //   } );\r\n    //   const doorplane = new THREE.Mesh( doorgeometry, doormaterial );\r\n    //   scene.add( doorplane );\r\n    //   doorplane.position.setFromCylindricalCoords(10, 3.5, 2);\r\n    //   doorplane.rotation.y = 30;\r\n    //   doorplane.position.x = 19;\r\n    //  // doorplane.rotation.x=0.02;\r\n    //   //winplane.position.y = -1;\r\n    //   //winplane.position.x = 10;\r\n\r\n    // new wall //\r\n    // const newfrontWallGeometry = new  THREE.BoxGeometry(20,10,0.5);\r\n    // const newfrontWallMaterial = new  THREE.MeshBasicMaterial({\r\n    //   color: \"grey\",\r\n    //   map: textureLoader.load(image2)\r\n    // });\r\n    // const  newfrontWall = new THREE.Mesh( newfrontWallGeometry, newfrontWallMaterial );\r\n    // newfrontWall.position.setFromCylindricalCoords(10, 1, 2);\r\n    // scene.add(newfrontWall);\r\n    // newfrontWall.position.x = -13;\r\n    // //newfrontWall.position.y = 20;\r\n    // newfrontWall.rotation.x= 0;\r\n\r\n\r\n\r\n\r\n    //new wall 2 //\r\n\r\n\r\n    // const newfrontWallGeometry2 = new  THREE.BoxGeometry(15,10,0.5);\r\n    // const newfrontWallMaterial2 = new  THREE.MeshBasicMaterial({\r\n    //  color: \"grey\",\r\n    //  map: textureLoader.load(image2)\r\n    // });\r\n    // const  newfrontWall2 = new THREE.Mesh( newfrontWallGeometry2, newfrontWallMaterial2 );\r\n    // newfrontWall2.position.setFromCylindricalCoords(10, 1, 2);\r\n    // scene.add(newfrontWall2);\r\n    // newfrontWall2.position.x = 13;\r\n    //newfrontWall.position.y = 20;\r\n    // newfrontWall2.rotation.x= 0;\r\n\r\n    // new wall images //\r\n\r\n    // const newwallimggeometry = new THREE.PlaneGeometry( 5, 4 );\r\n\r\n    // const newwallimgmaterial = new THREE.MeshBasicMaterial( {\r\n    //   //color: 0xffff00, \r\n    //   map: textureLoader.load(starts),\r\n    //   side: THREE.DoubleSide,\r\n    // } );\r\n    // const  newwallimgplane = new THREE.Mesh( newwallimggeometry, newwallimgmaterial );\r\n    // scene.add( newwallimgplane )\r\n    // newwallimgplane.position.x = 20;\r\n    // newwallimgplane.position.setFromCylindricalCoords(18, 5, 0);\r\n    // newwallimgplane.rotation.x= 0;\r\n\r\n    // newwallimgplane.position.x = -10;\r\n    // newwallimgplane.position.y = 2;\r\n\r\n\r\n\r\n    // Wall  img 1 //\r\n\r\n\r\n    let creactgroup = (name, x, y, z, a, b, c) => {\r\n      const geometry2 = new THREE.BoxGeometry(5, 3, 0.09);\r\n\r\n      const material2 = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide,\r\n        map: new THREE.TextureLoader().load(img)\r\n      });\r\n      const plane = new THREE.Mesh(geometry2, material2);\r\n      plane.position.setFromCylindricalCoords(x, y, z);\r\n      // plane.position.x= -6;\r\n      // plane.position.y= 0.5;\r\n      plane.position.set(a, b, c)\r\n      plane.name = name;\r\n\r\n      return plane;\r\n    }\r\n\r\n\r\n    const group = new THREE.Group();\r\n\r\n    let supermash1 = creactgroup('supermash1');\r\n    supermash1.position.setFromCylindricalCoords(-15, 3, 2);\r\n    supermash1.position.x = 17;\r\n    group.add(supermash1);\r\n\r\n    const supermash2 = creactgroup('supermash2');\r\n    supermash2.position.setFromCylindricalCoords(-15, -3, 2);\r\n    supermash1.position.x = 8;\r\n    group.add(supermash2);\r\n\r\n\r\n    const supermash3 = creactgroup('supermash3');\r\n    supermash3.position.setFromCylindricalCoords(-15, 3, 2);\r\n    supermash3.position.x = -4;\r\n    group.add(supermash3);\r\n\r\n\r\n\r\n\r\n    // Wall img  2 //\r\n\r\n\r\n    let creactgroup2 = (name, x, y, z, a, b, c) => {\r\n      const geometry2 = new THREE.BoxGeometry(5, 3, 0.09);\r\n\r\n      const material2 = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide,\r\n        map: new THREE.TextureLoader().load(img2)\r\n      });\r\n      const plane = new THREE.Mesh(geometry2, material2);\r\n      plane.position.setFromCylindricalCoords(x, y, z);\r\n      // plane.position.x= -6;\r\n      // plane.position.y= 0.5;\r\n      plane.position.set(a, b, c)\r\n      plane.name = name;\r\n\r\n      return plane;\r\n    }\r\n\r\n\r\n\r\n\r\n    const supermashWall1 = creactgroup2('supermashwall1');\r\n    supermashWall1.position.setFromCylindricalCoords(15, 3, 2.6);\r\n    supermashWall1.position.x = 9;\r\n    group.add(supermashWall1);\r\n\r\n    const supermashWall2 = creactgroup2('supermashwall2');\r\n    supermashWall2.position.setFromCylindricalCoords(15, 3, 2.6);\r\n    supermashWall2.position.x = 0;\r\n    group.add(supermashWall2);\r\n\r\n\r\n    const supermashWall3 = creactgroup2('supermashwall3');\r\n    supermashWall3.position.setFromCylindricalCoords(15, 3, 2.6);\r\n    supermashWall3.position.x = -9;\r\n    group.add(supermashWall3);\r\n\r\n\r\n\r\n\r\n\r\n    //Wall img  3 //\r\n\r\n\r\n    let creactgroup3 = (name, x, y, z, a, b, c) => {\r\n      const geometry3 = new THREE.BoxGeometry(5, 3, 0.09);\r\n\r\n      const material3 = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide,\r\n        map: new THREE.TextureLoader().load(img3)\r\n      });\r\n      const plane = new THREE.Mesh(geometry3, material3);\r\n      plane.position.setFromCylindricalCoords(x, y, z);\r\n      // plane.position.x= -6;\r\n      // plane.position.y= 0.5;\r\n      plane.position.set(a, b, c)\r\n      plane.name = name;\r\n\r\n      return plane;\r\n    }\r\n\r\n\r\n    const supermashWallLeft2 = creactgroup3('supermashWallLeft2');\r\n    supermashWallLeft2.position.setFromCylindricalCoords(10, 4, 2);\r\n    supermashWallLeft2.position.x = 13;\r\n\r\n    supermashWallLeft2.rotation.y = 30;\r\n    group.add(supermashWallLeft2);\r\n\r\n\r\n\r\n\r\n    const supermashWallLeft3 = creactgroup3('supermashWallLeft2');\r\n    supermashWallLeft3.position.setFromCylindricalCoords(10, 4.9, 2);\r\n    supermashWallLeft3.position.x = 15;\r\n    //supermashWallLeft3.position.y=10;\r\n    supermashWallLeft3.rotation.y = 30;\r\n    group.add(supermashWallLeft3);\r\n\r\n\r\n    const supermashWallLeft1 = creactgroup3('supermashWallLeft1');\r\n    supermashWallLeft1.position.setFromCylindricalCoords(-10, 3, 2);\r\n    supermashWallLeft1.position.x = 15;\r\n    supermashWallLeft1.rotation.y = 30;\r\n    group.add(supermashWallLeft1);\r\n\r\n\r\n    //Wall img  4 //\r\n\r\n\r\n    let creactgroup6 = (name, x, y, z, a, b, c) => {\r\n      const geometry5 = new THREE.BoxGeometry(5, 3, 0.09);\r\n\r\n      const material5 = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide,\r\n        map: new THREE.TextureLoader().load(room)\r\n      });\r\n      const plane = new THREE.Mesh(geometry5, material5);\r\n      plane.position.setFromCylindricalCoords(x, y, z);\r\n      // plane.position.x= -6;\r\n      // plane.position.y= 0.5;\r\n      plane.position.set(a, b, c)\r\n      plane.name = name;\r\n\r\n      return plane;\r\n    }\r\n\r\n\r\n\r\n\r\n    const supermashWallLeft11 = creactgroup6('supermashWallLeft11');\r\n    supermashWallLeft11.position.setFromCylindricalCoords(-8, 3, 2);\r\n    supermashWallLeft11.position.x = -13;\r\n\r\n    supermashWallLeft11.rotation.y = 36;\r\n    //supermashWallLeft11.rotation.z = -3;\r\n    group.add(supermashWallLeft11);\r\n\r\n\r\n    const supermashWallLeft12 = creactgroup6('supermashWallLeft12');\r\n    supermashWallLeft12.position.setFromCylindricalCoords(-1, 2, 2);\r\n    supermashWallLeft12.position.x = -13;\r\n\r\n    supermashWallLeft12.rotation.y = 30;\r\n    group.add(supermashWallLeft12);\r\n\r\n\r\n\r\n    const supermashWallLeft15 = creactgroup6('supermashWallLeft15');\r\n    supermashWallLeft15.position.setFromCylindricalCoords(10, 4, 2);\r\n    supermashWallLeft15.position.x = -13;\r\n\r\n    supermashWallLeft15.rotation.y = 36;\r\n    group.add(supermashWallLeft15);\r\n\r\n    scene.add(group);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Texture of the floor\r\n    const floorTexture = new THREE.TextureLoader().load(floor); // ImageUtils is deprecated in the newer versions of THREE.js\r\n    floorTexture.wrapS = THREE.RepeatWrapping; // wrapS is horizonatl direction\r\n    floorTexture.wrapT = THREE.RepeatWrapping; // wrapT the vertical direction\r\n    floorTexture.repeat.set(1, 1); // how many times to repeat the texture\r\n\r\n    // let floorTexture = new THREE.TextureLoader().load('img/Floor.jpg');\r\n    // textureLoader.load('img/Floor.jpg');cds\r\n\r\n    // Create the floor plane.\r\n    const planeGeometry = new THREE.PlaneBufferGeometry(45, 45); // BoxGeometry is the shape of the object\r\n    const planeMaterial = new THREE.MeshBasicMaterial({ // MeshBasicMaterial is the look of the object (color or texture)\r\n      map: floorTexture, // the texture\r\n      side: THREE.DoubleSide,\r\n    });\r\n\r\n    const floorPlane = new THREE.Mesh(planeGeometry, planeMaterial); // create the floor with geometry and material\r\n\r\n    floorPlane.rotation.x = Math.PI / 2; // this is 90 degrees\r\n    floorPlane.position.y = -Math.PI; // this is -180 degrees\r\n\r\n    scene.add(floorPlane); // add the floor to the scene\r\n\r\n\r\n    // Create the walls\r\n    let wallGroup = new THREE.Group(); // create a group to hold the walls\r\n    scene.add(wallGroup); // add the group to the scene, then any child added to the group will display to the scene too\r\n\r\n\r\n    // Front Wall //\r\n    const frontWallGeometry = new THREE.BoxGeometry(50, 20, 0.001);\r\n    const frontWallMaterial = new THREE.MeshBasicMaterial({\r\n      // color: \"grey\",\r\n      map: textureLoader.load(image2)\r\n    });\r\n    const frontWall = new THREE.Mesh(frontWallGeometry, frontWallMaterial);\r\n    scene.add(frontWall);\r\n    frontWall.position.z = -20;\r\n\r\n\r\n    //back Wall//\r\n    const backWallGeometry = new THREE.BoxGeometry(50, 30, 0.001);\r\n    const backWallMaterial = new THREE.MeshBasicMaterial({\r\n      //color: \"grey\",\r\n      map: textureLoader.load(image2)\r\n    });\r\n    const backWall = new THREE.Mesh(backWallGeometry, backWallMaterial);\r\n    scene.add(backWall);\r\n    backWall.position.z = 20;\r\n\r\n\r\n    // Left Wall\r\n    const leftWallGeometry = new THREE.BoxGeometry(50, 30, 0.001);\r\n    const leftWallMaterial = new THREE.MeshBasicMaterial({\r\n      // color: 'lightgrey',\r\n      map: textureLoader.load(image2)\r\n    });\r\n    const leftWall = new THREE.Mesh(leftWallGeometry, leftWallMaterial);\r\n    scene.add(leftWall);\r\n    leftWall.rotation.y = Math.PI / 2; // this is 90 degrees\r\n    leftWall.position.x = -20; // -20 is for 20 units left\r\n    leftWall.rotation.y = Math.PI / 2; // this is 90 degrees\r\n    leftWall.position.x = -20; // -20 is for 20 units left\r\n\r\n\r\n    // Right Wall\r\n    const rightWallGeometry = new THREE.BoxGeometry(50, 30, 0.001);\r\n    const rightWallMaterial = new THREE.MeshBasicMaterial({\r\n      //color: 'lightgrey',\r\n      map: textureLoader.load(image2)\r\n    });\r\n    const rightWall = new THREE.Mesh(rightWallGeometry, rightWallMaterial);\r\n    scene.add(rightWall);\r\n    rightWall.position.x = 20;\r\n    rightWall.rotation.y = Math.PI / 2; // this is 90 degrees\r\n\r\n    wallGroup.add(frontWall, leftWall, rightWall);\r\n\r\n    // Loop through each wall and create the bounding box\r\n    for (let i = 0; i < wallGroup.children.length; i++) {\r\n      wallGroup.children[i].Box = new THREE.Box3();\r\n      wallGroup.children[i].Box.setFromObject(wallGroup.children[i]);\r\n    }\r\n\r\n\r\n    // Create the ceiling\r\n    const ceilingGeometry = new THREE.PlaneBufferGeometry(1000, 90); // BoxGeometry is the shape the object\r\n    const ceilingMaterial = new THREE.MeshBasicMaterial({ // Lambert material is for non-shiny surfaces \r\n      //color: 'lavagrey',\r\n      map: textureLoader.load(nebula)\r\n    });\r\n    const ceilingPlane = new THREE.Mesh(ceilingGeometry, ceilingMaterial); // create ceiling with geometry and material\r\n\r\n    ceilingPlane.rotation.x = Math.PI / 2; // this is 90 degrees\r\n    ceilingPlane.position.y = 8;\r\n\r\n    scene.add(ceilingPlane);\r\n\r\n\r\n    // renderer.setClearColor(0xFFEA00);\r\n    //  const  textureLoader = new THREE.TextureLoader();\r\n\r\n    //scene.background = textureLoader.load(stars, );\r\n    // const cubeTextureLoader = new THREE.CubeTextureLoader();\r\n\r\n    // scene.background = cubeTextureLoader.load([\r\n    //   starsTexture,\r\n    //   starsTexture,\r\n    //   starsTexture ,\r\n    //   starsTexture,\r\n    //   starsTexture,\r\n    //   starsTexture,\r\n\r\n    //   ]);\r\n\r\n\r\n    const fpcontrols = new FirstPersonControls(camera, document.body);\r\n    fpcontrols.movementSpeed = 150;\r\n    fpcontrols.lookSpeed = 0.1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n\r\n    //controls.enablePan = false;\r\n    //controls.enableDamping = true;\r\n    //controls.rotateSpeed = - 0.25\r\n    controls.minDistance = 2;\r\n    controls.maxDistance = 5;\r\n    controls.maxZoom = 600;\r\n    controls.zoomSpeed = 2;\r\n    //controls.panSpeed = 2;\r\n    controls.rotateSpeed = 2;\r\n    //controls.autoRotate = true;\r\n    //controls.enableDamping = true;\r\n    //controls.screenSpacePanning =false;\r\n    // controls.keys = {\r\n    //   LEFT: 'ArrowLeft',\r\n    //   UP : 'ArrowUp',\r\n    //   RIGHT: 'ArrowRight',\r\n    //   BOTTOM : 'ArrowDown'\r\n    // }\r\n    controls.listenToKeyEvents(window)\r\n\r\n\r\n\r\n\r\n    controls.minPolarAngle = Math.PI / 2;\r\n    controls.maxPolarAngle = Math.PI / 6;\r\n\r\n\r\n\r\n    // \r\n\r\n\r\n    // Movement //\r\n    // let position = 0;\r\n    // window.addEventListener('mouseup', function() {\r\n    //   switch(position) {\r\n    //       case 0:\r\n    //           moveCamera(-1.8, -1.6, -10);\r\n    //           rotateCamera(10, 10, 10);\r\n    //           position = 1;\r\n    //           camera.zoom = 2;\r\n    //           break;\r\n\r\n    //           case 1:\r\n    //             moveCamera(1, 1, -10);\r\n    //             rotateCamera(15, 15, 15);\r\n    //             position = 2;\r\n    //             camera.zoom = 4;\r\n    //             break;\r\n\r\n    //   }\r\n\r\n\r\n    // })\r\n    //   function moveCamera(x, y, z) {\r\n    //         gsap.to(camera.position, {\r\n    //             x,\r\n    //             y,\r\n    //             z,\r\n    //             duration: 3\r\n    //         });\r\n    //     }\r\n\r\n    //     function rotateCamera(x, y, z) {\r\n    //         gsap.to(camera.rotation, {\r\n    //             x,\r\n    //             y,\r\n    //             z,\r\n    //             duration: 3.2\r\n    //         });\r\n    //     }\r\n\r\n\r\n\r\n    // Event Listenet for when we press the keys\r\n    document.addEventListener('keydown', onKeyDown, false);\r\n    // // function when a key is pressed, execute this function\r\n    function onKeyDown(event) {\r\n      let keycode = event.which;\r\n\r\n      // right arrow key\r\n      if (keycode === 39) \r\n      {\r\n        camera.translateY(-0.05);\r\n      }\r\n      // left arrow key\r\n      else if (keycode === 37) {\r\n        camera.translateY(0.05);\r\n      }\r\n\r\n\r\n      // up arrow key\r\n      else if (keycode === 38) {\r\n        camera.translateZ(0);\r\n      }\r\n      // down arrow key\r\n      else if (keycode === 40) {\r\n        camera.translateZ(0);\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function animate() {\r\n\r\n      requestAnimationFrame(animate);\r\n\r\n\r\n\r\n\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n\r\n    };\r\n\r\n    animate();\r\n  })\r\n  return (\r\n\r\n \r\n\r\n \r\n\r\n    <div>\r\n     <canvas id=\"mycanvas\"></canvas>\r\n      <style jsx>{`\r\n\r\n          body{\r\n            display: block;\r\n            overflow: hidden;\r\n          }\r\n          \r\n          canvas:nth-child(1){\r\n            display:none!important;\r\n          }\r\n          \r\n        `}</style>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Room;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}