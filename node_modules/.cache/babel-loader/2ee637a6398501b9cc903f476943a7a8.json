{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"http://localhost:5000/users/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n    try {\n      const res = await axios.post(\"http://localhost:5000/users/\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  try {\n    const res = await axios.post(\"http://localhost:5000/users/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"sources":["C:/FF/frontend/src/actions/AdminAuth.js"],"sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT,\n} from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n\tif (localStorage.token) {\n\t\tsetAuthToken(localStorage.token);\n\t}\n\n\ttry {\n\t\tconst res = await axios.get(\"http://localhost:5000/users/auth\");\n\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR,\n\t\t});\n\t}\n};\n\n// Register User\nexport const register =\n\t({ name, email, password }) =>\n\tasync (dispatch) => {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t};\n\n\t\tconst body = JSON.stringify({ name, email, password });\n\n\t\ttry {\n\t\t\tconst res = await axios.post(\n\t\t\t\t\"http://localhost:5000/users/\",\n\t\t\t\tbody,\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_SUCCESS,\n\t\t\t\tpayload: res.data,\n\t\t\t});\n\n\t\t\tdispatch(loadUser());\n\t\t} catch (err) {\n\t\t\tconst errors = err.response.data.errors;\n\n\t\t\tif (errors) {\n\t\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n\t\t\t}\n\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_FAIL,\n\t\t\t});\n\t\t}\n\t};\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t};\n\n\tconst body = JSON.stringify({ email, password });\n\n\ttry {\n\t\tconst res = await axios.post(\n\t\t\t\"http://localhost:5000/users/auth\",\n\t\t\tbody,\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(loadUser());\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL,\n\t\t});\n\t}\n};\n\n// Logout / Clear Profile\n\nexport const logout = () => (dispatch) => {\n\tdispatch({ type: LOGOUT });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}