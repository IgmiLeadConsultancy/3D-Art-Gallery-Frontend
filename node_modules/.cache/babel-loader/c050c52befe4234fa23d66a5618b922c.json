{"ast":null,"code":"import { SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\nconst initialState = [];\n\nconst Alert_Err = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n\n    case REMOVE_ALERT:\n      return state.filter(alert => alert.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\n_c = Alert_Err;\nexport default Alert_Err;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert_Err\");","map":{"version":3,"names":["SET_ALERT","REMOVE_ALERT","initialState","Alert_Err","state","action","type","payload","filter","alert","id"],"sources":["C:/FF/mern-auth/src/reducers/alert.js"],"sourcesContent":["import { SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\n\nconst initialState = [];\n\nconst Alert_Err= (state = initialState, action)=> {\n\tconst { type, payload } = action;\n\n\tswitch (type) {\n\t\tcase SET_ALERT:\n\t\t\treturn [...state, payload];\n\t\tcase REMOVE_ALERT:\n\t\t\treturn state.filter((alert) => alert.id !== payload);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default Alert_Err;"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,kBAAxC;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAEA,MAAMC,SAAS,GAAE,YAAiC;EAAA,IAAhCC,KAAgC,uEAAxBF,YAAwB;EAAA,IAAVG,MAAU;EACjD,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAoBF,MAA1B;;EAEA,QAAQC,IAAR;IACC,KAAKN,SAAL;MACC,OAAO,CAAC,GAAGI,KAAJ,EAAWG,OAAX,CAAP;;IACD,KAAKN,YAAL;MACC,OAAOG,KAAK,CAACI,MAAN,CAAcC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OAArC,CAAP;;IACD;MACC,OAAOH,KAAP;EANF;AAQA,CAXD;;KAAMD,S;AAaN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}